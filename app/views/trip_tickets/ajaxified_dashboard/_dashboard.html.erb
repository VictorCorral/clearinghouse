<%= content_for :head do %>
  <%= javascript_include_tag "dashboard" %>
  <%= javascript_tag do %>
    var dashboard = {
      // We use this frequently
      root_url: '<%= j trip_tickets_path %>',

      // For current state trackings
      current_trip_ticket: null,
      current_trip_ticket_detail_view: null,
      
      // Background polling
      polling: {
        idler: null,
        last_refresh_at: new Date(),
        refresh_rate:    30000, // in milliseconds (30 seconds)
        away_threshold: 300000, // in milliseconds (5 minutes)
        refresh_paused:  false,
        idlePause: function() {
          console.debug('background polling paused');
          dashboard.polling.refresh_paused = true;
          if (dashboard.current_trip_ticket) {
            dashboard.resetViews($('#background_polling_paused'));
          }
        },
        idleResume: function() {
          console.debug('background polling resumed');
          dashboard.polling.refresh_paused = false;
          if (dashboard.current_trip_ticket) {
            dashboard.resetViews($('.content-frame'));
          }
          dashboard.refresh(true);
        },
        supportsIdleJs: function(){
          // See: https://github.com/shawnmclean/Idle.js/issues/7
          return !$.browser.msie || parseInt($.browser.version) > 8;
        },
        supportsVisible: function(){
          // Idle.js interprets page navigation in Firefox as being "away"
          // See: https://github.com/shawnmclean/Idle.js/issues/9
          return dashboard.polling.supportsIdleJs() && !$.browser.mozilla;
        },
      },
      
      multiple_select: {
        enabled: false
      },
      
      error_state: {
        current_error: null
      },
    };
    $(function () {
      'use strict';
      
      // The Application
      // ---------------
      dashboard.DashboardView = Backbone.View.extend({

        // Instead of generating a new element, bind to the existing skeleton of
        // the App already present in the HTML.
        el: '#main',

        // Delegated events for dashboard-wide actions
        events: {
          'submit form.form-filter': 'saveFilters',
          'click .actions-list-holder .action-select-multiple': 'toggleSelectMultiple',
          'click .actions-list-holder .multiple-select-claim-selected': 'claimSelected',
          'click .actions-list-holder .action-new': 'newTicket',
        },

        // At initialization we bind to the relevant events on the TripTickets
        // collection, when items are added or changed. Kick things off by
        // loading any preexisting tickets that match the current filter state
        initialize: function () {
          // Setup the dashboard and remove the standard view
          this.createDashboard();

          // Make some functions public
          dashboard.clickify = this.clickify;
          dashboard.displayErrors = this.displayErrors;
          dashboard.display404Message = this.display404Message;
          dashboard.display500Message = this.display500Message;
          dashboard.errorHandler = this.errorHandler;
          dashboard.resetViews = this.resetViews;
          dashboard.resetForm = this.resetForm;
          dashboard.refresh = this.refresh;

          // Make sure we can access the original request URL from any jqXHR objects
          $.ajaxPrefilter('json', function(options, originalOptions, jqXHR) {
            jqXHR.originalRequestOptions = originalOptions;
          });

          // Create our global collection of **TripTickets**.
          dashboard.trip_tickets = new TripTickets();

          // Initiate a new history and controller class
          dashboard.TripTicketRouter = new TripTicketRouter();

          // Kickstart the router
          Backbone.history.start({silent: true});

          // Event listeners
          this.listenTo(dashboard.trip_tickets, 'reset', this.addTicketsToList);
          this.listenTo(dashboard.trip_tickets, 'add', this.addTicketToList);

          // Setup our cross-browser local storage object for state tracking
          dashboard.localStorage = $.jStorage;

          // Find our initial state
          if (
            window.location.hash.length && 
            window.location.hash.indexOf('#' + dashboard.root_url) == 0 &&
            !isNaN(parseInt(window.location.hash.replace('#'+dashboard.root_url+'/', '')))
          ) {
            // a hashbang path to a specific trip ticket was present on page load
            dashboard.localStorage.set('initial_trip_ticket_id_on_render', parseInt(window.location.hash.replace('#'+dashboard.root_url+'/', '')));
          }

          // Fetch the list of tickets, and reset the application view
          // We do this rather than using the data from the initial request
          // because our JSON requests will return some rendered template data
          dashboard.trip_tickets.fetch({reset: true});
          
          // Start the idle tracker to pause background polling when not needed
          dashboard.polling.idler = new Idle({
            onAway:      dashboard.polling.supportsIdleJs()  ? dashboard.polling.idlePause  : jQuery.noop,
            onAwayBack:  dashboard.polling.supportsIdleJs()  ? dashboard.polling.idleResume : jQuery.noop,
            onHidden:    dashboard.polling.supportsVisible() ? dashboard.polling.idlePause  : jQuery.noop,
            onVisible:   dashboard.polling.supportsVisible() ? dashboard.polling.idleResume : jQuery.noop,
            awayTimeout: dashboard.polling.away_threshold,
          });

          // Call refresh() every 2 seconds
          setInterval(function(){
            dashboard.refresh();
          }, 2000);
        },

        render: function() {
          // Reset the multiple-select state
          dashboard.multiple_select.enabled = false;
          var button = this.$('.actions-list-holder .action-select-multiple');
          button.removeClass('checked').addClass('unchecked');
          button.closest('ul').find('.multiple-select-action').hide({effect: 'slide', speed: 'fast', easing: 'easeInOutCubic', direction: 'right'});
          
          // Links anywhere in the document that route to the root url should be handled by Backbone
          this.clickify($('a[href^="'+dashboard.root_url+'"]'));

          // Reset the scrollbars
          jcf.customForms.replaceAll($('.tickets-holder')[0]);

          // Setup the initial trip ticket detail view
          var $el = null, $el_temp;
          $el = (dashboard.localStorage.get('initial_trip_ticket_id_on_render') && ($el_temp = this.$('.tickets-list li [data-id="'+dashboard.localStorage.get('initial_trip_ticket_id_on_render')+'"]').closest('li')) && $el_temp.length) ? $el_temp : null;
          if ($el == null) $el = (dashboard.localStorage.get('current_trip_ticket_id') && ($el_temp = this.$('.tickets-list li [data-id="'+dashboard.localStorage.get('current_trip_ticket_id')+'"]').closest('li')) && $el_temp.length) ? $el_temp : null;
          if ($el == null) $el = (($el_temp = this.$('.tickets-list li:first')) && $el_temp.length) ? $el_temp : null;
          
          // Cleanup current-state items anytime view is reset, i.e. `dashboard.trip_tickets.fetch({reset: true})`
          dashboard.localStorage.deleteKey('initial_trip_ticket_id_on_render');
          dashboard.localStorage.deleteKey('current_trip_ticket_id');
          dashboard.current_trip_ticket = null;

          if ($el) {
            $el.trigger('click', {trigger: false, replace: true});

            // Scroll list element into view
            // We have to do this after `jcf.customForms.replaceAll()`, otherwise
            // the scrollbars get reset and we lose position.
            var height = $el.outerHeight();
            var position = $el.position().top;
            var scroll_offset = (height > position) ? position : position + height;
            $('.tickets-holder .scrollable-area')[0].jcf.vScrollBar.scrollTo(position /* scroll_offset */);
          } else {
            this.display404Message(dashboard.localStorage.get('initial_trip_ticket_id_on_render'));
          }
          
          return this;
        },

        // Custom Functions
        // ---------------

        addTicketToList: function (trip_ticket) {
          var index = dashboard.trip_tickets.indexOf(trip_ticket);
          var view = new dashboard.TripTicketListItemView({ model: trip_ticket });
          var previousItem = $(".tickets-list>li:eq(" + index.toString() + ")");
          if (previousItem.length) {
            previousItem.before(view.render().el);
          } else {
            $('.tickets-list').append(view.render().el);
          }
        },

        addTicketsToList: function () {
          this.$('.tickets-list').html('');
          dashboard.trip_tickets.each(this.addTicketToList, this);
          this.render();
        },

        createDashboard: function() {
          $('#main .actions-list-holder .actions-list').prepend('<li><a href="#" class="no-clickify action-select-multiple"><span>Select Multiple</span></a></li><li class="multiple-select-action" style="display: none"><a href="#" class="no-clickify multiple-select-claim-selected"><span>Claim Selected</span></a></li>');

          // Undo previously applied scrollbar - they won't work properly 
          // since they were hidden in the DOM when the page was rendered
          jcf.customForms.destroyAll();
          $('.scrollable-area-wrapper>.scrollable-area').unwrap();
          $('.scrollable-area').removeAttr('style');
          $('.vscrollbar').remove();

          // Reset height of scrollable areas to match available viewport height
          // Eventually the filter multi-selects will be converted to combo-boxes
          // and will have significantly less height, so assume our two content
          // areas will be the largest elements.
          var scrollable_height = $(window).height() - $('#header').outerHeight() - $('.actions-list-holder').outerHeight() - $('body>footer').height();
          var margin_hight_offset = $('.content-frame').outerHeight() - $('.content-frame').height();
          var minimum_height = parseInt($('.tickets-list').css('minHeight'));
          scrollable_height = (scrollable_height < minimum_height) ? minimum_height : scrollable_height;
          $('.tickets-list').css('height', scrollable_height + 'px');
          $('.content-frame').css('height', (scrollable_height - margin_hight_offset) + 'px');

          $('#standard_ticket_list').fadeOut().remove();
          $('#ajaxified_dashboard').fadeIn();

          // Now reapply the scrollbars to get the correct sizing
          jcf.customForms.replaceAll($('#ajaxified_dashboard')[0]);
        },

        // Ensure that certain links are handled by the dashboard router
        clickify: function($elements) {
          $elements.not('.no-clickify, .clickified').each(function(){
            var href = $(this).attr('href');
            if (href.indexOf('#') != 0)
              $(this).attr('href', '#' + href);
            $(this).addClass('clickified');
          });
        },

        // TODO - convert this to a Backbone view
        display404Message: function(ticket_id, previously_selected) {
          ticket_id = ticket_id || 0;
          var selector = (!!previously_selected) ? '#selected_resource_removed' : '#requested_resource_not_found';
          dashboard.resetViews($(selector));
          if (!!(ticket_id)) {
            $(selector + ' .ticket-direct-link-wrapper')
              .show()
              .find('a.ticket-direct-link')
              .attr('href', dashboard.root_url + '/' + ticket_id);
            var clear_filter_url = '<%= j clear_filters_trip_tickets_path %>?return_to=' + encodeURIComponent('<%= j trip_tickets_path %>#' + dashboard.root_url + '/' + ticket_id);
          } else {
            $(selector + ' .ticket-direct-link-wrapper').hide();
            var clear_filter_url = '<%= j clear_filters_trip_tickets_path %>';
          }
          $(selector + ' .clear-trip_ticket-filters').attr('href', clear_filter_url);
          dashboard.current_trip_ticket = null;
        },

        // TODO - convert this to a Backbone view
        display500Message: function() {
          dashboard.resetViews($('#an_error_occurred'));
          $('#main .tickets-list li.check').removeClass('check');
          dashboard.current_trip_ticket = null;
        },

        // TODO - convert this to a Backbone view
        displayErrors: function(json_errors) {
          if (!$.isEmptyObject(json_errors.rendered_partial)) {
            var error_container = $('<div class="">');
            error_container.html(json_errors.rendered_partial);
          } else {
            var error_container = $('<div class="error_explanation">');
            error_container.html('<ul></ul>');
            _.each(_.values(json_errors), function(errors) {
              _.each(errors, function(error) {
                $('<li>' + error + '</li>').appendTo(error_container.find('ul'));
              });
            });
          }
          
          error_container.dialog({
            title: "The following errors occurred",
            width: 625,
            modal: true,
            draggable: false,
            resizable: false,
            buttons: {
              OK: function() {
                $(this).dialog('close');
              },
            },
            close: function() {
              $(this).dialog('destroy');
            },
          });
        },

        // TODO - move this to be a direct descendant of `dashboard`
        errorHandler: function(jqXHR) {
          console.debug('An error occurred', jqXHR);
          if (jqXHR.status == 422) {
            this.displayErrors($.parseJSON(jqXHR.responseText));
          } else if (jqXHR.status == 404) {
            // display404Message expects a ticket_id argument
            var ticket_id = parseInt(jqXHR.originalRequestOptions.url.replace(dashboard.root_url + '/', ''));
            this.display404Message(ticket_id);
          } else if (jqXHR.status == 500) {
            this.display500Message();
          } else {
            console.debug('Failed to handle an unexpected error code!', jqXHR.status);
          }
        },

        saveFilters: function(e) {
          e.preventDefault();
          var form = $(e.currentTarget);
          var data = form.find(':input').serialize();
          $.getJSON(dashboard.root_url, data, function(){
            dashboard.trip_tickets.fetch({reset: true});
          })
          .fail(function(jqXHR) {
            dashboard.errorHandler(jqXHR);
          });
        },
        
        toggleSelectMultiple: function(e) {
          e.preventDefault();
          var button = $(e.currentTarget);
          if (dashboard.multiple_select.enabled) {
            dashboard.trip_tickets.fetch({reset: true});
          } else {
            dashboard.resetViews($('#select_multiple_instructions'));

            dashboard.multiple_select.enabled = true;
            button.closest('ul').find('.multiple-select-action').show({effect: 'slide', speed: 'fast', easing: 'easeInOutCubic', direction: 'right'});
            button.removeClass('unchecked').addClass('checked');
            
            var $tickets = $('.tickets-list li');
            var $checked = $tickets.filter('.check');
            $tickets.addClass('multiple-select-enabled').not($checked).find('.checked-status').removeClass('checked').addClass('unchecked');
            $checked.removeClass('check');
          }
        },
        
        claimSelected: function(e) {
          e.preventDefault();
          var view = new dashboard.ClaimSelectedFormView();
          view.render();
        },

        newTicket: function(e) {
          e.preventDefault();
          var view = new dashboard.NewTicketFormView();
          view.render();
        },

        // TODO - move this to be a direct descendant of `dashboard`
        resetViews: function($show) {
          $('.content-frame').hide();
          $('#selected_resource_removed').hide();
          $('#requested_resource_not_found').hide();
          $('#an_error_occurred').hide();
          $('#select_multiple_instructions').hide();
          $('#background_polling_paused').hide();
          $show.show();
        },

        // TODO - move this to be a direct descendant of `dashboard`
        resetForm: function(scope) {
          scope.find(':input').not(':button, :submit, :reset, :hidden').each( function() {
            if (this.type == 'text' || this.type == 'textarea') {
              this.value = '';
            }
            else if (this.type == 'radio' || this.type == 'checkbox') {
              this.checked = false;
            }
            else if (this.type == 'select-one') {
              this.selectedIndex = 0;
            }
            else if (this.type == 'select-multiple') {
              this.selectedIndex = -1;
            }
          });
        },
        
        // TODO - move this to be a direct descendant of `dashboard`
        refresh: function(force) {
          // TODO - Display a message and require reload after a specific
          // period of time, i.e. when the session times out
          
          force = force || false;
          var timestamp = new Date();
          var refresh_offset = timestamp.valueOf() - dashboard.polling.last_refresh_at.valueOf();

          // Check if refresh is required
          if (dashboard.polling.refresh_paused == false && (force || refresh_offset > dashboard.polling.refresh_rate)) {
            dashboard.trip_tickets.fetch();
            dashboard.polling.last_refresh_at = new Date();
          }
        },
      });

      // Claim Multiple View
      // ---------------
      dashboard.ClaimSelectedFormView = Backbone.View.extend({
        tagName:  'div',
        className: 'form-holder',

        initialize: function() {
          this.listenTo(Backbone, "claimSelectedForm:submit", this.submit);
        },

        render: function () {
          var _this = this;
          var ids = $('#main .tickets-list .checked-status.checked').closest('li').find('>div').map(function(){return $(this).data('id');}).get();
          var data = $.param({ trip_ticket: { selected_ids: ids} });
          $.getJSON(dashboard.root_url + '/claim_multiple', data, function(data){
            _this.$el.html(data.rendered_partial).dialog({
              title: "Claim Multiple Trip Tickets",
              width: 625,
              modal: true,
              draggable: false,
              resizable: false,
              buttons: {
                Cancel: function() {
                  $(this).dialog('close');
                },
                Save: function() {
                  Backbone.trigger('claimSelectedForm:submit');
                }
              },
              create: function() {
                $(this).find('tfoot').remove();
              },
              close: function() {
                $(this).dialog('destroy');
                _this.remove();
              },
            });
          })
          .fail(function(jqXHR) {
            dashboard.errorHandler(jqXHR);
          });
        },

        submit: function() {
          var _this = this;
          var form = this.$('form').first();
          $.post(
            form.attr('action'),
            form.find(':input').serialize(),
            function(data, status, jqXHR) {
              $('.actions-list-holder .action-select-multiple').trigger('click');
              _this.$el.dialog('close');
            },
            'json'
          ).fail(function(jqXHR) {
            dashboard.errorHandler(jqXHR);
          });
        },
      });

      // New Ticket View
      // ---------------
      dashboard.NewTicketFormView = Backbone.View.extend({
        tagName:  'div',
        className: 'form-holder',

        initialize: function() {
          this.listenTo(Backbone, "newTicketForm:submit", this.submit);
        },

        render: function () {
          var _this = this;
          $.getJSON(dashboard.root_url + '/new', function(data){
            _this.$el.html(data.rendered_partial).dialog({
              title: "New Trip Ticket",
              width: 625,
              modal: true,
              draggable: false,
              resizable: false,
              buttons: {
                Cancel: function() {
                  $(this).dialog('close');
                },
                Save: function() {
                  Backbone.trigger('newTicketForm:submit');
                }
              },
              create: function() {
                $(this).find('.buttons-holder').remove();
              },
              close: function() {
                $(this).dialog('destroy');
                _this.remove();
              },
            });
          })
          .fail(function(jqXHR) {
            dashboard.errorHandler(jqXHR);
          });
        },

        submit: function() {
          var _this = this;
          var form = this.$('form').first();
          $.post(
            form.attr('action'),
            form.find(':input').serialize(),
            function(data, status, jqXHR) {
              dashboard.TripTicketRouter.navigate('#' + dashboard.root_url + '/' + data.id, {trigger: true});
              _this.$el.dialog('close');
            },
            'json'
          ).fail(function(jqXHR) {
            dashboard.errorHandler(jqXHR);
          });
        },
      });

      // Trip Ticket List Item View
      // ---------------
      dashboard.TripTicketListItemView = Backbone.View.extend({
        tagName:  'li',

        events: {
          'click': 'click',
        },

        initialize: function () {
          this.listenTo(this.model, 'change', this.render);
          this.listenTo(this.model, 'remove', this.remove);
          this.listenTo(this.model, 'destroy', this.remove);
        },

        render: function () {
          this.$el.addClass('status_' + this.model.get('downcased_status'));
          this.$el.html(this.model.get('rendered_partial'));
          this.clickify();

          // If this is the currently displayed ticket, re-render the ticket too
          if (dashboard.current_trip_ticket && dashboard.current_trip_ticket.get('id') == this.model.get('id')) {
            dashboard.current_trip_ticket.fetch();
          }

          return this;
        },

        remove: function() {
          // If this is the currently displayed ticket, destroy that too
          if (dashboard.current_trip_ticket && dashboard.current_trip_ticket.get('id') == this.model.get('id')) {
            dashboard.current_trip_ticket.trigger('remove');
          }

          // Call the super method to run the default functionality
          Backbone.View.prototype.remove.call(this);

          return this;
        },

        clickify: function() {
          dashboard.clickify(this.$el.find('a[href^="'+dashboard.root_url+'"]'));
          this.$el.find('a').css('text-decoration', 'none');
          this.$el.css('cursor', 'pointer');
        },

        click: function(navigate_opts) {
          if (dashboard.multiple_select.enabled) {
            this.$el.find('.checked-status').toggleClass('checked').toggleClass('unchecked');
          } else {
            if (!dashboard.current_trip_ticket || this.model.get('id') != dashboard.current_trip_ticket.get('id')) {
              // These allow us to override the default navigate options when we
              // are initializing the application
              navigate_opts = navigate_opts || {}
              navigate_opts['trigger'] = navigate_opts['trigger'] || true;
              navigate_opts['replace'] = navigate_opts['replace'] || false;
            
              this.$el.siblings('.check').removeClass('check');
              this.$el.addClass('check');

              dashboard.TripTicketRouter.navigate(
                this.$el.find('.column:first a:first').attr('href'),
                navigate_opts
              );

              dashboard.localStorage.set('current_trip_ticket_id', this.model.get('id'));
            }
          }
        },
      });

      // Trip Ticket Detail View
      // ---------------
      dashboard.TripTicketDetailView = Backbone.View.extend({
        // Bind to the existing element
        el: 'div.content-frame',

        // The DOM events specific to an item.
        events: {
          'click a.activity-rescind' : 'rescind',
          'click a.activity-comment' : 'comment',
          'click a.activity-claim'   : 'claim',
          'click a.activity-edit'    : 'edit',
          'click a.claim-rescind'    : 'rescindClaim',
          'click .activity-list a'   : 'showActivity',
        },

        initialize: function () {
          this.listenTo(this.model, 'change', this.render);
          this.listenTo(this.model, 'remove', this.remove);
          this.listenTo(this.model, 'destroy', this.remove);
        },

        render: function () {
          dashboard.resetViews(this.$el);
          this.$el.html(this.model.get('rendered_partial'));
          dashboard.clickify(this.$el.find('a[href^="'+dashboard.root_url+'"]'));
          jcf.customForms.replaceAll(this.$el.closest('.content-holder')[0]);
          initOpenClose(this.$el);
          return this;
        },

        remove: function () {
          if (dashboard.trip_tickets.get(this.model) != undefined) {
            // Ticket is still in list
            this.$el.html('Loading...');
          } else {
            // Ticket is no longer in the view
            dashboard.display404Message(this.model.get('id'), true);
          }
          this.stopListening(this.model);
          this.undelegateEvents();
          return this;
        },

        rescind: function(e) {
          e.preventDefault();
          
          // We have to prevent this event from bubbling up so that the
          // onclick event of the link itself doesn't get run. At the end of
          // this method we'll need to manually trigger the event bubble
          e.stopPropagation();
          
          var link = $(e.currentTarget);
          if (!link.data('confirm') || confirm(link.data('confirm'))) {
            $.post(
              link.attr('href'),
              function() {
                dashboard.trip_tickets.fetch();
              },
              'json'
            ).fail(function(jqXHR) {
              dashboard.errorHandler(jqXHR);
            });
          }
          
          // Ensure other backbone event listeners are notified of the click
          // event
          link.parent().trigger('click');
          
          return this;
        },

        comment: function(e) {
          e.preventDefault();
          var view = new dashboard.TripTicketCommentFormView();
          view.render();
        },

        claim: function(e) {
          e.preventDefault();
          var view = new dashboard.TripTicketClaimFormView({model: this.model, claim_url: $(e.currentTarget).attr('href')});
          view.render();
        },

        rescindClaim: function(e) {
          e.preventDefault();
          var view = new dashboard.RescindTripClaimFormView({
            model: this.model, 
            claim_url: $(e.currentTarget).attr('href'),
            rescind_url: $(e.currentTarget).attr('data-rescind'),
          });
          view.render();
        },

        edit: function(e) {
          e.preventDefault();
          var view = new dashboard.EditTripTicketFormView({model: this.model});
          view.render();
        },

        showActivity: function(e) {
          e.preventDefault();
          var $this = $(e.currentTarget);
          var url = null;
          if ($this.data('activity-type') == 'trip_result') {
            url = $this.attr('href');
          } else {
            url = $this.attr('href').replace(/\/\d+$/, '');
          }
          $.getScript(url).fail(function(jqXHR) {
            dashboard.errorHandler(jqXHR);
          });
        },
      });

      // Trip Ticket Comment Form View
      // ---------------
      dashboard.TripTicketCommentFormView = Backbone.View.extend({
        el:  'div.trip-ticket-comment-form',

        initialize: function() {
          this.listenTo(Backbone, "commentForm:submit", this.submit);
        },

        render: function () {
          var _this = this;
          this.$el.dialog({
            title: "Add Comment",
            width: 325,
            modal: true,
            draggable: false,
            resizable: false,
            buttons: {
              Cancel: function() {
                $(this).dialog('close');
              },
              Save: function() {
                Backbone.trigger('commentForm:submit');
              }
            },
            open: function() {
              var textarea = $(this).find('textarea:first');
              var padding = textarea.outerWidth() - textarea.width();
              textarea.width($(this).width() - padding);
            },
            close: function() {
              $(this).dialog('destroy');
            },
          });
        },

        submit: function() {
          var _this = this;
          var form = this.$('form').first();
          if (form.find('#trip_ticket_comment_body').val().length > 0) {
            $.post(
              form.attr('action'),
              form.find(':input').serialize(),
              function() {
                dashboard.current_trip_ticket.fetch();
                _this.$el.dialog('close');
              },
              'json'
            ).fail(function(jqXHR) {
              dashboard.errorHandler(jqXHR);
            });
          }
          dashboard.resetForm(form);
        }
      });

      // Trip Ticket Claim Form View
      // ---------------
      dashboard.TripTicketClaimFormView = Backbone.View.extend({
        tagName:  'div',
        className: 'form-holder',

        initialize: function() {
          this.listenTo(Backbone, "claimForm:submit", this.submit);
        },

        render: function () {
          var _this = this;
          $.getJSON(this.options.claim_url, function(data){
            _this.$el.html(data.rendered_partial).dialog({
              title: "Create Trip Claim",
              width: 625,
              modal: true,
              draggable: false,
              resizable: false,
              buttons: {
                Cancel: function() {
                  $(this).dialog('close');
                },
                Save: function() {
                  Backbone.trigger('claimForm:submit');
                }
              },
              create: function() {
                $(this).find('.buttons-holder').remove();
              },
              close: function() {
                $(this).dialog('destroy');
                _this.remove();
              },
            });
          })
          .fail(function(jqXHR) {
            dashboard.errorHandler(jqXHR);
          });
        },

        submit: function() {
          var _this = this;
          var form = this.$('form').first();
          $.post(
            form.attr('action'),
            form.find(':input').serialize(),
            function(data, status, jqXHR) {
              dashboard.trip_tickets.fetch();
              _this.$el.dialog('close');
            },
            'json'
          ).fail(function(jqXHR) {
            dashboard.errorHandler(jqXHR);
          });
        },
      });

      // Edit Trip Claim Form View
      // ---------------
      dashboard.RescindTripClaimFormView = Backbone.View.extend({
        tagName:  'div',
        className: 'form-holder',

        initialize: function() {
          this.listenTo(Backbone, "RescindTripClaimForm:submit", this.submit);
        },

        render: function () {
          var _this = this;
          $.getJSON(this.options.claim_url, function(data){
            _this.$el.html(data.rendered_partial).dialog({
              title: "Update Claim",
              width: 625,
              modal: true,
              draggable: false,
              resizable: false,
              buttons: {
                Rescind: function() {
                  if (window.confirm('Are you sure you want to RESCIND this claim?')) {
                    Backbone.trigger('RescindTripClaimForm:submit');
                  }
                },
                Cancel: function() {
                  $(this).dialog('close');
                }
              },
              create: function() {
                $(this).find('.buttons-holder').remove();
              },
              close: function() {
                $(this).dialog('destroy');
                _this.remove();
              },
            });
          })
          .fail(function(jqXHR) {
            dashboard.errorHandler(jqXHR);
          });
        },

        submit: function() {
          var _this = this;
          var form = this.$('form').first();
          $.post(
            this.options.rescind_url,
            // form.find(':input').serialize(),
            function(data, status, jqXHR) {
              dashboard.trip_tickets.fetch();
              _this.$el.dialog('close');
            },
            'json'
          ).fail(function(jqXHR) {
            dashboard.errorHandler(jqXHR);
          });
        },
      });

      // Edit Trip Ticket Form View
      // ---------------
      dashboard.EditTripTicketFormView = Backbone.View.extend({
        tagName:  'div',
        className: 'form-holder',

        initialize: function() {
          this.listenTo(Backbone, "editTripTicketForm:submit", this.submit);
        },

        render: function () {
          var _this = this;
          $.getJSON(dashboard.root_url + '/' + this.model.get('id') + '/edit', function(data){
            _this.$el.html(data.rendered_partial).dialog({
              title: "Edit Trip Claim",
              width: 625,
              modal: true,
              draggable: false,
              resizable: false,
              buttons: {
                Cancel: function() {
                  $(this).dialog('close');
                },
                Save: function() {
                  Backbone.trigger('editTripTicketForm:submit');
                }
              },
              create: function() {
                $(this).find('.buttons-holder').remove();
              },
              close: function() {
                $(this).dialog('destroy');
                _this.remove();
              },
            });
          })
          .fail(function(jqXHR) {
            dashboard.errorHandler(jqXHR);
          });
        },

        submit: function() {
          var _this = this;
          var form = this.$('form').first();
          $.post(
            form.attr('action'),
            form.find(':input').serialize(),
            function(data, status, jqXHR) {
              dashboard.trip_tickets.fetch();
              _this.$el.dialog('close');
            },
            'json'
          ).fail(function(jqXHR) {
            dashboard.errorHandler(jqXHR);
          });
        },
      });

      // TripTicket Model
      // ---------------
      dashboard.TripTicket = Backbone.Model.extend({
        urlRoot: dashboard.root_url,
      });

      // TripTicket Collection
      // ---------------
      var TripTickets = Backbone.Collection.extend({
        // Reference to this collection's model.
        model: dashboard.TripTicket,

        // Base URL for operating on this collection
        url: dashboard.root_url,

        comparator: function (a, b) {
          if (a.get('primary_ordering_timestamp') < b.get('primary_ordering_timestamp')) {
             return -1;
          } else if (a.get('primary_ordering_timestamp') > b.get('primary_ordering_timestamp')) {
             return 1;
          } else {
            if (a.get('secondary_ordering_timestamp') < b.get('secondary_ordering_timestamp')) {
               return -1;
            } else if (a.get('secondary_ordering_timestamp') > b.get('secondary_ordering_timestamp')) {
               return 1;
            } else {
              return 0;
            }
          }
        },
      });

      // TripTicket Router
      // ---------------
      var TripTicketRouter = Backbone.Router.extend({
        routes: {
          // catch-all for undefined routes
          "*notfound" : "notfound",
        },

        initialize: function(options) {
          var root_url = dashboard.root_url.replace(/^\//, '');
          this.route(root_url, 'index');

          // ORDER IS IMPORTANT!
          this.route(root_url + "/:id", 'show');
          this.route(root_url + "/clear_filters", 'clearFilters');
        },

        index: function() {
          dashboard.trip_tickets.fetch({reset: true});
          return this;
        },

        show: function(id){
          if (dashboard.current_trip_ticket_detail_view != null) {
            dashboard.current_trip_ticket_detail_view.remove();
          }
          $.getJSON(dashboard.root_url + '/' + id, function(data){
            dashboard.current_trip_ticket = new dashboard.TripTicket(data);
            dashboard.current_trip_ticket_detail_view = new dashboard.TripTicketDetailView({ model: dashboard.current_trip_ticket });
            dashboard.current_trip_ticket_detail_view.render();
          })
          .fail(function(jqXHR) {
            dashboard.errorHandler(jqXHR);
          });
          return this;
        },

        clearFilters: function() {
          $.getJSON(dashboard.root_url + '/clear_filters', function(data){
            dashboard.TripTicketRouter.navigate('#' + dashboard.root_url, {trigger: true, replace: true});
            dashboard.resetForm($('form.form-filter'));
          })
          .fail(function(jqXHR) {
            dashboard.errorHandler(jqXHR);
          });
          return this;
        },

        notfound: function(notfound){
          if(notfound) {
            console.debug("Route not implemented: " + notfound);
          }
        },
      });

      // kick things off by creating the `App`
      var _dashboard = new dashboard.DashboardView();
    });
  <% end %>
<% end %>

<div id="ajaxified_dashboard" style="display: none">
  <div class="tickets-holder"><div class="scrollable-area"><ul class="tickets-list"></ul></div></div>
  <div class="content-holder"><div class="scrollable-area">
    <div class="content-frame"></div>
    <div id="an_error_occurred" style="display: none" class="padded">
      <p style="text-align: center; font-weight: bold">
        <br><br>
        An error occurred while processing your request.
        <br><br>
        You can try to select another ticket, <%= link_to "clear the filters", clear_filters_trip_tickets_path, class: "no-clickify clear-trip_ticket-filters", style: "text-decoration: underline" %> or <%= link_to "reload the page", "javascript:window.location.reload()" %>.
      </p>
    </div>
    <div id="selected_resource_removed" style="display: none" class="padded">
      <p style="text-align: center; font-weight: bold">
        <br><br>
        The previously selected ticket is no longer available with your currently applied filters.
        <br><br>
        You can select another ticket, try to <%= link_to "clear the filters", clear_filters_trip_tickets_path, class: "no-clickify clear-trip_ticket-filters", style: "text-decoration: underline" %><span style="display: none" class="ticket-direct-link-wrapper">, or try to <%= link_to "view the previous trip ticket directly", "#", class: "no-clickify ticket-direct-link", style: "text-decoration: underline" %></span>.
      </p>
    </div>
    <div id="requested_resource_not_found" style="display: none" class="padded">
      <p style="text-align: center; font-weight: bold">
        <br><br>
        The requested ticket is not available with your currently applied filters.
        <br><br>
        You can select another ticket, try to <%= link_to "clear the filters", clear_filters_trip_tickets_path, class: "no-clickify clear-trip_ticket-filters", style: "text-decoration: underline" %><span style="display: none" class="ticket-direct-link-wrapper">, or try to <%= link_to "view the requested trip ticket directly", "#", class: "no-clickify ticket-direct-link", style: "text-decoration: underline" %></span>.
      </p>
    </div>
    <div id="select_multiple_instructions" style="display: none" class="padded">
      <p style="text-align: center; font-weight: bold">
        <br><br>
        You are now in multiple selection mode.
      </p>
      <p>
        Clicking on tickets will check or uncheck them. When you have selected all of the tickets you want, you can click the "Claim Selected" button to claim any that are available to you.
        <br><br>
        To go back to the normal mode, just click the "Select Multiple" button again.
      </p>
    </div>
    <div id="background_polling_paused" style="display: none" class="padded">
      <p style="text-align: center; font-weight: bold">
        <br><br>
        Background refreshing of data has been paused due to inactivity. 
        <br><br>
        Refreshing will automatically resume with renewed activity.
      </p>
    </div>
    <div id="modal-dialog" style="display: none"><!-- This is referenced in several JS format partials --></div>
  </div></div>
</div>
